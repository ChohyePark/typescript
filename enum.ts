// 이넘 (enum)은 특정 값의 집합을 의미하는 데이터 타입이다. 
// 먼저, 변하지 않는 고정 값(const)을 상수라고 하는데 상수는 단순히 고정된 값을 저장하는 것뿐만 아니라 이 값이 어떤 의미를 갖는지 알려 줌으로써 가독성을 높이는 장점이 있다. 변수의 역할인 값에 의미를 부여하는 것과 같은 맥락이다.

// note : 상수는 보통 모두 대문자로 작성해서 일반 변수와 구분하낟.

// 이러한 여러개의 상수를 하나의 단위로 묶으면 이넘이 된다. 비슷한 성격이나 같은 범주에 있는 상수를 하나로 묶어 더 큰 단위의 상수로 만드는 것이 이넘의 역할이다.

enum ShoesBrand {
  Nike,
  Adidas,
  NewBalance,
}

// 이 이넘의 값의 각 속성은 다음과 같은 형태로 사용한다.

var myShoes = ShoesBrand.Nike; // 0이 할당

// 숫자형 이념 - 이넘에 선언된 속성은 기본적으로 숫자값을 가진다. 다음과 같이 이넘을 선언하면 첫번째 속성부터 0,1,2,3이 할당된다.

enum Direction {
  Up, // 0
  Down, // 1
  Left, // 2
  Right, //3
}

console.log(Direction.Up); // 0
console.log(Direction[0]); // Up

// 위와 같이 이넘의 속성과 값이 거꾸로 연결되어 할당되는 것을 리버스 매핑 이라고 한다. 이처럼 타입스크립트의 이넘에 선언된 속성은 기본적으로 숫자값을 갖는다. 만약 이넘 속성의 초기값을 변경하고 싶다면 다음과 같이 선언한다.

enum Direction2 {
  Up = 10,
  Down, // 11
  Left, // 12
  Right // 13 
}


// 문자형 이넘 - 문자형 이넘이란 이넘의 속성 값에 문자열을 연결한 이념을 의미한다. 숫자형 이넘과 다르게 모든 속성 값을 다 문자열로 지정해주어야 하고, 선언된 속성대로 값이 증가하는 규칙도 없다.

enum Direction3 {
  Up = 'UP',
  Down = 'DOWN',
  Left = 'LEFT',
  Right = 'RIGHT'
}

// 다음과 같이 이넘의 Up 속성값을 출력하면 문자열이 출력된다

console.log(Direction3.Up); // UP

// * 실무에서는 이넘 값을 숫자로 관리하기 보다 문자열로 관리하는 사례가 더 많다. 그리고 속성 이름과 값을 동일한 문자열로 관리하는 것도 일반적인 코딩 규칙이다. 파스칼 (Pascal Case) 로 작성해도 괜찮고 모두 대문자로 적거나 언더 스코어를 사용해도 상관 없다

// 알아두면 좋은 이넘의 특징 1. 혼합이넘

enum Answer {
  Yes = 'Yes',
  No = 1
}

// 다양한 이넘 속성 값 정의 방식

enum Authorization {
  User,
  Admin,
  SuperAdmin = User + Admin, // 0 + 1 
  God = 'abc'.length // 3
}

// const 이넘 - 이넘을 선언할 때 앞에 const를 붙인 이넘

const enum logLevel {
  Debug = 'Debug',
  Info = 'Info',
  Error = 'Error'
}

// 만약 const enum이 아닌 일반 emum 을 다룰 때 이넘을 코드에서 활용하려면 객체를 내부적으로 선언해서 이넘 속성 값들을 연결해주어야 한다. 여기에서 이넘 코드는 컴파일될 객체가 이넘의 속성 이름과 값을 연결해주는 객체를 생성한다는 사실을 알 수 있다. 반면 const 이넘은 객체를 생성하지 않고 이넘이 사용되는 곳에서 속성 값을 바로 연결해준다. 그러므로 const 이넘은 컴파일했을 때 코드양을 줄여준다.

// 다만 const 이넘은 항상 속성에 고정 값만 넣어 주어야 한다.

// *** 다시한번 기억 - 문자형 이넘 방식이 가장 많이 활용 됨 

